class KeyboardMapper{constructor(){this.keyMappings=new Map,this.activeKeys=new Set,this.ignoreInputs=["INPUT","SELECT","TEXTAREA"],this.scope="default",this.handleKeyUp=this.handleKeyUp.bind(this),document.addEventListener("keydown",this.handleKeyDown.bind(this),!0),document.addEventListener("keyup",this.handleKeyUp)}mapCombination(e,t,s="default"){if("string"!=typeof e||"function"!=typeof t)return void console.error("Invalid combination or callback");const n=e.toLowerCase();this.keyMappings.has(n)||this.keyMappings.set(n,[]);const o=this.keyMappings.get(n);o.push({callback:t,scope:s}),document.addEventListener("keydown",(e=>{const t=this.getKeyFromEvent(e).toLowerCase(),s=this.getScope();o.forEach((o=>{o.scope!==s&&"default"!=o.scope||t!==n||(e.preventDefault(),o.callback(e))}))}))}getScope(){return this.scope}unmapCombination(e){const t=e.toLowerCase();this.keyMappings.delete(t)}handleKeyDown(e){if(this.ignoreInputs.includes(e.target.tagName))return;const t=this.getKeyFromEvent(e);this.activeKeys.add(t),this.executeCallbacks()}handleKeyUp(e){if(this.ignoreInputs.includes(e.target.tagName))return;const t=this.getKeyFromEvent(e);this.activeKeys.delete(t)}executeCallbacks(){const e=Array.from(this.activeKeys).join("+"),t=this.keyMappings.get(e);t&&t.forEach((e=>{const{callback:t,scope:s}=e;if("function"==typeof t){this.getScope()!==s&&"default"!==s||t()}}))}getKeyFromEvent(e){const{key:t,shiftKey:s,ctrlKey:n,altKey:o,metaKey:i}=e;let a="";return(n||i)&&(a+="ctrl+"),s&&(a+="shift+"),o&&(a+="alt+"),a+=t.toLowerCase(),a}setScope(e){this.scope=e}destroy(){document.removeEventListener("keydown",this.handleKeyDown),document.removeEventListener("keyup",this.handleKeyUp)}}
