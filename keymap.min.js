class KeyboardMapper{constructor(){this.keyMappings=new Map,this.activeKeys=new Set,this.activeCodes=new Set,this.ignoreInputs=["INPUT","SELECT","TEXTAREA"],this.scope="default",document.addEventListener("keydown",this.handleKeyDown.bind(this)),document.addEventListener("keyup",this.handleKeyUp.bind(this))}mapCombination(e,t,s="default"){if("string"!=typeof e||"function"!=typeof t)return void console.error("Invalid combination or callback");e.split(",").map((e=>e.trim().toLowerCase())).forEach((e=>{this.keyMappings.has(e)||this.keyMappings.set(e,[]);this.keyMappings.get(e).push({callback:t,scope:s})}))}unmapCombination(e){const t=e.toLowerCase();this.keyMappings.delete(t)}handleKeyDown(e){if(this.ignoreInputs.includes(e.target.tagName))return;const t=this.getKeyFromEvent(e);this.activeCodes.add(t.codes[0]),this.activeKeys.add(t.result[0]),this.executeCallbacks()}handleKeyUp(e){const t=this.getKeyFromEvent(e);this.ignoreInputs.includes(e.target.tagName)||(this.activeCodes.delete(t.codes[0]),this.activeKeys.delete(t.result[0]))}executeCallbacks(){const e=Array.from(this.activeKeys),t=Array.from(this.activeCodes);e.join("+"),t.join("+");this.keyMappings.forEach(((s,i)=>{const n=i.split("+");(e.length===n.length&&n.every((t=>e.includes(t)))||t.length===n.length&&n.every((e=>t.includes(e))))&&s.forEach((e=>{const{callback:t,scope:s}=e;if("function"==typeof t){this.getScope()!==s&&"default"!==s||t()}}))}))}getKeyFromEvent(e){const{code:t,key:s,shiftKey:i,ctrlKey:n,altKey:o,metaKey:a}=e;let c=[],r=[];return r.push(t.toLowerCase()),c.push(s.toLowerCase()),{codes:r,result:c}}getScope(){return this.scope}setScope(e){this.scope=e}}